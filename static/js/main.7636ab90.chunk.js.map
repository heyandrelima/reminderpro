{"version":3,"sources":["components/App.js","actions/index.js","constants.js","reducers/index.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","dueDate","event","preventDefault","target","querySelector","value","addReminder","id","deleteReminder","clearReminders","_this2","reminders","react_default","a","createElement","ListGroup","className","map","reminder","ListGroupItem","key","moment","Date","fromNow","Button","bsStyle","onClickCapture","removeReminder","_this3","Grid","Row","Col","lg","onSubmit","submitReminder","FormGroup","FormControl","type","placeholder","onChange","setState","renderReminders","onClick","Component","connect","arguments","length","undefined","action","read_cookie","toConsumableArray","concat","Math","random","sort","b","bake_cookie","filter","deleteById","store","createStore","reducer","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"sUAOMA,qBAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,KAAM,GACNC,QAAS,IALET,8EASJU,GACXA,EAAMC,iBAEND,EAAME,OAAOC,cAAc,SAASC,MAAQ,GAC5CX,KAAKJ,MAAMgB,YAAYZ,KAAKI,MAAMC,KAAML,KAAKI,MAAME,gDAGxCO,GACXb,KAAKJ,MAAMkB,eAAeD,4CAI1Bb,KAAKJ,MAAMmB,2DAGG,IAAAC,EAAAhB,KACRiB,EAAYjB,KAAKJ,MAAMqB,UAE7B,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAU,kBAEbL,EAAUM,IAAI,SAAAC,GACV,OACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAeC,IAAKF,EAASX,IACzBK,EAAAC,EAAAC,cAAA,YAAOI,EAASnB,MAChBa,EAAAC,EAAAC,cAAA,WAAMO,IAAO,IAAIC,KAAKJ,EAASlB,UAAUuB,WACzCX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACIC,QAAQ,SACRT,UAAU,gBACVU,eAAgB,kBAAMhB,EAAKiB,eAAeT,EAASX,MAHvD,6CAanB,IAAAqB,EAAAlC,KACL,OACIkB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KAEIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,IACLpB,EAAAC,EAAAC,cAAA,4BAKRF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAAA,QAAMmB,SAAU,SAAAhC,GAAK,OAAI2B,EAAKM,eAAejC,KACzCW,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,GACLpB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACIC,KAAK,OACLC,YAAY,eACZC,SAAU,SAAAtC,GAAK,OAAI2B,EAAKY,SAAS,CAAEzC,KAAME,EAAME,OAAOE,WAE1DO,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACIC,KAAK,iBACLE,SAAU,SAAAtC,GAAK,OAAI2B,EAAKY,SAAS,CAAExC,QAASC,EAAME,OAAOE,YAGjEO,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,GACLpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,QAAQ,UAAUY,KAAK,UAA/B,2BAShBzB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,IACHtC,KAAK+C,mBAGX7B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,IACLpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACIC,QAAQ,UACRiB,QAAS,kBAAMd,EAAKnB,mBAFxB,6BA3FNkC,cA4GHC,kBANf,SAAyB9C,GACrB,MAAO,CACHa,UAAWb,IAIqB,CAACQ,YCjHd,SAACP,EAAMC,GAO9B,MANe,CACXqC,KCJoB,eDKpBtC,OACAC,YD6G8CQ,eCvGxB,SAACD,GAM3B,MALe,CACX8B,KCbuB,kBDcvB9B,ODoG8DE,eC9FxC,WAK1B,MAJe,CACX4B,KCrBuB,qBFiHhBO,CAAwEvD,2BGtDxEsB,EAxCG,WAAwB,IAAvBb,EAAuB+C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClCpC,EAAY,KAGhB,OAFAb,EAAQmD,sBAAY,aAEbD,EAAOX,MACV,ID1BoB,eCoChB,OATA1B,EAASnB,OAAA0D,EAAA,EAAA1D,CAAOM,GAAPqD,OAAA,CAxBJ,SAACH,GAAW,IACnBjD,EAAkBiD,EAAlBjD,KAAMC,EAAYgD,EAAZhD,QAEZ,MAAO,CACHO,GAAI6C,KAAKC,SACTtD,OACAC,WAkB2BkB,CAAS8B,KAChCrC,EAAYA,EAAU2C,KAAK,SAACzC,EAAG0C,GAI3B,OAHc,IAAIjC,KAAKT,EAAEb,SACX,IAAIsB,KAAKiC,EAAEvD,WAK7BwD,sBAAY,YAAa7C,GAClBA,EAEX,IDrCuB,kBC+CnB,OATAA,EA1BO,WAAoB,IAAnBb,EAAmB+C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,GAAItC,EAAOsC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAKnC,OAJkBjD,EAAM2D,OAAO,SAAAvC,GAC3B,OAAOA,EAASX,KAAOA,IAwBPmD,CAAW5D,EAAOkD,EAAOzC,IACrCI,EAAYA,EAAU2C,KAAK,SAACzC,EAAG0C,GAI3B,OAHc,IAAIjC,KAAKT,EAAEb,SACX,IAAIsB,KAAKiC,EAAEvD,WAK7BwD,sBAAY,YAAa7C,GAClBA,EAEX,IDhDuB,kBCoDnB,OAHAA,EAAY,GACZ6C,sBAAY,YAAa7C,GAElBA,EAEX,QACI,OAAOb,IClDb6D,EAAQC,YAAYC,GAE1BC,IAASC,OACLnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUL,MAAOA,GACb/C,EAAAC,EAAAC,cAACmD,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.7636ab90.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addReminder, deleteReminder, clearReminders } from '../actions/index';\nimport { Grid, Row, Col, FormGroup, FormControl, Button, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport moment from 'moment';\nimport '../index.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            dueDate: ''\n        };\n    }\n\n    submitReminder(event) {\n        event.preventDefault();\n\n        event.target.querySelector('input').value = '';\n        this.props.addReminder(this.state.text, this.state.dueDate);\n    }\n\n    removeReminder(id) {\n        this.props.deleteReminder(id);\n    }\n\n    clearReminders() {\n        this.props.clearReminders();\n    }\n\n    renderReminders() {\n        const reminders = this.props.reminders;\n\n        return(\n            <ListGroup className=\"reminders-list\">\n                {\n                    reminders.map(reminder => {\n                        return(\n                            <ListGroupItem key={reminder.id}>\n                                <span>{reminder.text}</span>\n                                <div>{moment(new Date(reminder.dueDate)).fromNow()}</div>\n                                <Button\n                                    bsStyle=\"danger\"\n                                    className=\"remove-button\"\n                                    onClickCapture={() => this.removeReminder(reminder.id)}\n                                >&times;</Button>\n                            </ListGroupItem>\n                        )\n                    })\n                }\n            </ListGroup>\n        );\n    }\n\n    render() {\n        return(\n            <Grid>\n                {/* Title */}\n                <Row>\n                    <Col lg={12}>\n                        <h1>Reminder Pro</h1>\n                    </Col>\n                </Row>\n\n                {/* Form */}\n                <Row>\n                    <form onSubmit={event => this.submitReminder(event)}>\n                        <FormGroup>\n                            <Col lg={8}>\n                                <FormControl \n                                    type=\"text\"\n                                    placeholder=\"I need to...\"\n                                    onChange={event => this.setState({ text: event.target.value })}\n                                />\n                                <FormControl \n                                    type=\"datetime-local\"\n                                    onChange={event => this.setState({ dueDate: event.target.value })}\n                                />\n                            </Col>\n                            <Col lg={4}>\n                                <Button bsStyle=\"success\" type=\"submit\">\n                                    Create the reminder\n                                </Button>\n                            </Col>\n                        </FormGroup>\n                    </form>\n                </Row>\n\n                {/* Reminders list */}\n                <Row>\n                    <Col lg={12}>\n                        { this.renderReminders() }\n                    </Col>\n\n                    <Col lg={12}>\n                        <Button\n                            bsStyle=\"warning\"\n                            onClick={() => this.clearReminders()}\n                        >Clear reminders</Button>\n                    </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        reminders: state\n    };\n}\n\nexport default connect(mapStateToProps, {addReminder, deleteReminder, clearReminders})(App);","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\n\nexport const addReminder = (text, dueDate) => {\n    const action = {\n        type: ADD_REMINDER,\n        text,\n        dueDate\n    };\n\n    return action;\n};\n\nexport const deleteReminder = (id) => {\n    const action = {\n        type: DELETE_REMINDER,\n        id\n    };\n\n    return action;\n}\n\nexport const clearReminders = () => {\n    const action = {\n        type: CLEAR_REMINDERS\n    };\n\n    return action;\n}","export const ADD_REMINDER = 'ADD_REMINDER';\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\nimport { bake_cookie, read_cookie } from 'sfcookies';\n\nconst reminder = (action) => {\n    let { text, dueDate } = action;\n\n    return {\n        id: Math.random(),\n        text,\n        dueDate\n    };\n};\n\nconst deleteById = (state = [], id) => {\n    const reminders = state.filter(reminder => {\n        return reminder.id !== id ;\n    });\n\n    return reminders;\n};\n\nconst reminders = (state = [], action) => {\n    let reminders = null;\n    state = read_cookie('reminders');\n\n    switch(action.type) {\n        case ADD_REMINDER:\n            reminders = [...state, reminder(action)];\n            reminders = reminders.sort((a, b) => {\n                const dateA = new Date(a.dueDate);\n                const dateB = new Date(b.dueDate);\n\n                return dateA - dateB;\n            });\n\n            bake_cookie('reminders', reminders);\n            return reminders;\n\n        case DELETE_REMINDER:\n            reminders = deleteById(state, action.id);\n            reminders = reminders.sort((a, b) => {\n                const dateA = new Date(a.dueDate);\n                const dateB = new Date(b.dueDate);\n\n                return dateA - dateB;\n            });\n\n            bake_cookie('reminders', reminders);\n            return reminders;\n\n        case CLEAR_REMINDERS: \n            reminders = [];\n            bake_cookie('reminders', reminders);\n\n            return reminders;\n\n        default:\n            return state;\n    }\n};\n\nexport default reminders;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);"],"sourceRoot":""}